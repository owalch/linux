#!/usr/bin/env python
"""translate english <> german"""

# aptitude install trans-de-en
dictfile = '/usr/share/trans/de-en' 
maxoutput = 14

import re, sys
import textwrap
from os.path import *
if not exists(dictfile):
    dictfile = join(dirname(sys.argv[0]), 'de-en')


def main():
    args = sys.argv[1:]


    if '-c' in args:
        i = args.index('-c')
        maxoutput = int(args[i+1])
        del args[i:i+2]

    search = ' '.join(args)
    lookup(search)

def prepare_entry(entry, search):
    entry = entry.decode('utf8')
    entry = re.sub(r'{[^}]*}', '', entry)
    de, en = entry.split('::')

    de = de.split('|')
    en = en.split('|')

    subentries = zip(en, de)

    # filter out subentries without our searchstring
    result = []
    for en, de in subentries:
        if search not in (en+de).lower(): continue
        result.append((en.strip(), de.strip()))

    return result

def lookup(search):
    search = search.lower()
    search_re = re.compile(r'\b' + search + r'\b', re.IGNORECASE)

    exact_matches = []
    wordstart_matches = []
    other_matches = []

    for line in open(dictfile):
        line_lower = line.lower()
        if search in line_lower:
            if search_re.search(line):
                exact_matches.append(line)
            else:
                if [word for word in line_lower.split() if word.startswith(search)]:
                    wordstart_matches.append(line)
                else:
                    other_matches.append(line)


    results = exact_matches + wordstart_matches + other_matches                
    if not results:
        print 'nothing found'
        return

    results = [prepare_entry(line, search) for line in results]

    # flatten the list
    final = []
    for subentries in results:
        final += subentries
    results = final

    # combine exactly equal results
    d = {}
    for en, de in results:
        d.setdefault(en, []).append(de)
    results = []
    for en, de in d.iteritems():
        results.append((en, ', '.join(de)))

    # sort (simplest match first)
    def score(a):
        value = 0
        if a[0].lower() == search or a[1].lower() == search:
            value += 1000
        if search in a[0].lower().split() + a[1].lower().split():
            value += 100
        value -= len(a[0]) + len(a[1])
        return value
    def cmpfunc(a, b):
        return cmp(score(b), score(a))
    results.sort(cmpfunc)

    total = len(results)
    results = results[0:maxoutput]
    length = max([len(x[0]) for x in results])
    if length > 36: length = 36
    for r in results:
        a = textwrap.wrap(r[0], 36)
        b = textwrap.wrap(r[1], 80-6-length)
        while a or b:
            aa = bb = ''
            if a: aa = a.pop(0)
            if b: bb = b.pop(0)
            s = '   %-' + str(length) + 's   %s'
            print s % (aa, bb)

    if total > len(results):
        print '%d more' % (total - len(results))

main()
